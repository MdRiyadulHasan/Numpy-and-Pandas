{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNtdbkgoT0qQsquXBdIjRSr",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MdRiyadulHasan/Numpy-and-Pandas/blob/main/1.numpy_zero_to_heros\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_vMss32QcqQk",
        "outputId": "69e279e9-62cf-4367-f118-df9ddc730b0c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Natural', 'Language', 'Processing', 'is', 'fascinating', '!']\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n"
          ]
        }
      ],
      "source": [
        "import nltk\n",
        "nltk.download('punkt')  # Download the necessary data\n",
        "\n",
        "from nltk.tokenize import word_tokenize\n",
        "\n",
        "text = \"Natural Language Processing is fascinating!\"\n",
        "tokens = word_tokenize(text)\n",
        "print(tokens)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Create a NumPy array\n",
        "arr = np.array([1, 2, 3, 4, 5])\n",
        "\n",
        "# Perform element-wise operations\n",
        "squared_arr = arr**2\n",
        "sum_arr = np.sum(arr)\n",
        "sum_arr1 = np.sum(squared_arr)\n",
        "\n",
        "print(squared_arr)  # Output: [ 1  4  9 16 25]\n",
        "print(sum_arr)      # Output: 15\n",
        "print(sum_arr1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jTCreUrWgwuw",
        "outputId": "f90e4cd8-cdc0-4d01-abf2-630e2bacd7d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 1  4  9 16 25]\n",
            "15\n",
            "55\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Create a 2D NumPy array\n",
        "arr = np.array([[1, 2, 3], [4, 5, 6]])\n",
        "\n",
        "# Access an element\n",
        "element = arr[0, 1]  # Accesses the element at row 0, column 1\n",
        "print(\"element\", element)\n",
        "\n",
        "# Perform element-wise operations\n",
        "squared_arr = arr**2\n",
        "print(squared_arr)\n",
        "\n",
        "# Get the shape and size of the array\n",
        "shape = arr.shape  # Shape is (2, 3)\n",
        "size = arr.size    # Size is 6\n",
        "\n",
        "# Check the data type\n",
        "dtype = arr.dtype  # Data type is int64\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mqlyXPvGzo9A",
        "outputId": "d7d95fad-c542-4866-c133-f5a166e0a0bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "element 2\n",
            "[[ 1  4  9]\n",
            " [16 25 36]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "\n",
        "# Creating two vectors\n",
        "vector1 = np.array([1, 2, 3])\n",
        "vector2 = np.array([4, 5, 6])\n",
        "\n",
        "# Addition\n",
        "result1 = vector1 + vector2  # [5, 7, 9]\n",
        "\n",
        "# Subtraction\n",
        "result2 = vector1 - vector2  # [-3, -3, -3]\n",
        "\n",
        "# Multiplication\n",
        "result3 = vector1 * vector2  # [4, 10, 18]\n",
        "\n",
        "# Division\n",
        "result4 = vector1 / vector2  # [0.25, 0.4, 0.5]\n",
        "print(f\"Addition : {}\")\n"
      ],
      "metadata": {
        "id": "gDVV0XhA1Lox"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "\n",
        "# Creating two vectors\n",
        "vector1 = np.array([1, 2, 3])\n",
        "vector2 = np.array([4, 5, 6])\n",
        "\n",
        "# Addition\n",
        "result1 = vector1 + vector2  # [5, 7, 9]\n",
        "\n",
        "# Subtraction\n",
        "result2 = vector1 - vector2  # [-3, -3, -3]\n",
        "\n",
        "# Multiplication\n",
        "result3 = vector1 * vector2  # [4, 10, 18]\n",
        "\n",
        "# Division\n",
        "result4 = vector1 / vector2  # [0.25, 0.4, 0.5]\n",
        "print(f\"Addition : {result1} Subtraction : {result2} Multiplication : {result3} Division : {result4} \")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "spIxR5ud1mBY",
        "outputId": "b499b6b6-b3b5-4745-9777-e9f98a0ca66e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Addition : [5 7 9] Subtraction : [-3 -3 -3] Multiplication : [ 4 10 18] Division : [0.25 0.4  0.5 ] \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_vector = np.array([1, 2, 3, 4, 5])\n",
        "\n",
        "# Accessing elements by index\n",
        "element = my_vector[2]  # Access the third element (3)\n",
        "\n",
        "# Slicing to extract a portion\n",
        "subset = my_vector[1:4]  # Extract elements at index 1, 2, and 3: [2, 3, 4]\n",
        "\n",
        "print(f\"Element : {element} subset : {subset}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VfIF1WO-2Y7Q",
        "outputId": "e7f4776b-53d2-4fa6-f245-167eae566b53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Element : 3 subset : [2 3 4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Vector Functions:"
      ],
      "metadata": {
        "id": "IAqLhoJY21Fi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "my_vector = np.array([1, 2, 3, 4, 5])\n",
        "\n",
        "# Calculate the sum of elements\n",
        "total = np.sum(my_vector)  # 15\n",
        "\n",
        "# Calculate the mean (average)\n",
        "average = np.mean(my_vector)  # 3.0\n",
        "\n",
        "# Find the minimum and maximum elements\n",
        "min_value = np.min(my_vector)  # 1\n",
        "max_value = np.max(my_vector)  # 5\n"
      ],
      "metadata": {
        "id": "tLr_6bP72--B"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "zeros_vector = np.zeros(5)  # Creates a vector of 5 zeros\n",
        "ones_vector = np.ones(5)    # Creates a vector of 5 ones\n",
        "print(zeros_vector)\n",
        "print(ones_vector)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MNsUDnlt3qVU",
        "outputId": "fe36b6fd-a07e-473e-90dc-d62d45fec88a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0. 0. 0. 0. 0.]\n",
            "[1. 1. 1. 1. 1.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "range_vector = np.arange(0, 18, 3)  # Creates a vector [0, 2, 4, 6, 8]\n",
        "\n",
        "print(range_vector)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bvUkTASM33sp",
        "outputId": "b4436257-1583-40af-b38f-3be2833b2545"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 0  3  6  9 12 15]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "linspace_vector = np.linspace(0, 1, 5)\n",
        "print(linspace_vector)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yPw5f6yE4IUf",
        "outputId": "7349f057-2ad0-44d9-8e04-d8143374bf18"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.   0.25 0.5  0.75 1.  ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = np.array([1, 2, 3])\n",
        "b = np.array([4, 5, 6])\n",
        "result_addition = a + b\n",
        "result_subtraction = a - b\n",
        "result_multiplication = a * b\n",
        "result_division = a / b\n",
        "print(result_addition)\n",
        "print(result_subtraction)\n",
        "print(result_multiplication)\n",
        "print(result_division)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7MvCQ8_w58x6",
        "outputId": "28fbf101-38ee-4110-c62d-5c450ae0d743"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5 7 9]\n",
            "[-3 -3 -3]\n",
            "[ 4 10 18]\n",
            "[0.25 0.4  0.5 ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dot_product = np.dot(a, b)\n",
        "print(dot_product)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tXUnIRst6dSj",
        "outputId": "8a128eb5-fc48-41ca-e0ef-f7125ab9180f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "32\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "square_root = np.sqrt(a)\n",
        "exponential = np.exp(a)\n",
        "print(square_root)\n",
        "print(exponential)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HzBeUhbEKpO8",
        "outputId": "c84194dd-a724-43ef-c9ce-4a8e8b1cddb4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.         1.41421356 1.73205081]\n",
            "[ 2.71828183  7.3890561  20.08553692]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reshaped_array = my_vector.reshape(5, 1)  # Reshape into a 5x1 matrix\n",
        "print(reshaped_array)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xgCOfQt8K-Mm",
        "outputId": "592f2841-879d-4ad1-acad-8f15af4277dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1]\n",
            " [2]\n",
            " [3]\n",
            " [4]\n",
            " [5]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "concatenated = np.concatenate([a, b])  # Concatenate two arrays\n",
        "print(concatenated)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jp0TqkKqLHCn",
        "outputId": "74c5aadd-d79a-4f79-a6af-0c890ca9161d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2 3 4 5 6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vector = np.array([1, 2, 3, 4, 5])\n",
        "result = vector + 2\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zXohxumwL9DV",
        "outputId": "eb08d67e-46a4-47e4-837e-d3b5ba92bc87"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[3 4 5 6 7]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Create a 1D array (vector)\n",
        "vector = np.array([1, 2, 3, 4, 5, 6])\n",
        "\n",
        "# Reshape the vector into a 2D array (matrix)\n",
        "matrix = vector.reshape(2, 3)\n",
        "\n",
        "# Alternatively, you can use np.reshape()\n",
        "matrix = np.reshape(vector, (2, 3))\n",
        "\n",
        "print(matrix)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aw3sn-x6Mr4n",
        "outputId": "339f2479-8619-4174-c682-a578ffd339b3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2 3]\n",
            " [4 5 6]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Create a 1D array (vector)\n",
        "vector = np.array([1, 2, 3, 4, 5])\n",
        "\n",
        "# Transpose the vector (doesn't change anything)\n",
        "transposed_vector = vector.T\n",
        "\n",
        "print(transposed_vector)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vXoImpXKMzTd",
        "outputId": "7be7c207-0985-451a-e0bc-728598a4a67e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2 3 4 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "arr = np.array([1, 2, 3, 4, 5])\n",
        "print(arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rWWoMj3zOjyz",
        "outputId": "a70e250a-9996-4096-c7fc-3e9b96d03f9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2 3 4 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "zeros_arr = np.zeros((2, 3))\n",
        "ones_arr = np.ones((3, 2))\n",
        "empty_arr = np.empty((2, 2))\n",
        "print(zeros_arr)\n",
        "print(ones_arr)\n",
        "print(empty_arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e4oCGAfvOp2i",
        "outputId": "dc9f7215-23ff-499d-ba09-d833a07e00b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0. 0. 0.]\n",
            " [0. 0. 0.]]\n",
            "[[1. 1.]\n",
            " [1. 1.]\n",
            " [1. 1.]]\n",
            "[[0.25 0.5 ]\n",
            " [0.75 1.  ]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "identity_matrix = np.eye(3)\n",
        "print(identity_matrix)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TXaaSkCgPLRn",
        "outputId": "11e27568-c668-485c-b3a8-db96444b5bd3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1. 0. 0.]\n",
            " [0. 1. 0.]\n",
            " [0. 0. 1.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "random_arr = np.random.rand(3, 3)\n",
        "print(random_arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wOrWcAD9PUTM",
        "outputId": "850d3801-115e-4846-96dd-571644cd7db0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.48208296 0.61995627 0.98294534]\n",
            " [0.42728629 0.5135952  0.05330161]\n",
            " [0.34779821 0.35862258 0.21934364]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "normal_random_arr = np.random.randn(3, 3)\n",
        "print(normal_random_arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cyZ1oH9BPkAb",
        "outputId": "11ea8b25-923d-4506-e27e-d20b7889c51b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[-0.63348688  0.56625177  0.42028106]\n",
            " [-0.74248486  1.35767006 -0.62510193]\n",
            " [-0.36486195 -1.53165775  0.73449628]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "constant_arr = np.full((3, 4), 7)\n",
        "print(constant_arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KNDllkrjPyZS",
        "outputId": "699485a7-ace4-43ca-9bf6-8e2797d0acb7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[7 7 7 7]\n",
            " [7 7 7 7]\n",
            " [7 7 7 7]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "arr = np.array([[1, 2, 7, 6, 2], [3, 4, -8, 5, 3], [10, 11, 12 , 15, 13]])\n",
        "total_sum = np.sum(arr)  # Sum of all elements in the array\n",
        "row_sum = np.sum(arr, axis=1)  # Sum along each row\n",
        "col_sum = np.sum(arr, axis=0)  # Sum along each column\n",
        "print(total_sum)\n",
        "print(row_sum)\n",
        "print(col_sum)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PC9Imm_UQfls",
        "outputId": "f49b9086-ee72-4456-8fd0-2a39f473f25c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "86\n",
            "[18  7 61]\n",
            "[14 17 11 26 18]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mean_value = np.mean(arr)  # Mean of all elements in the array\n",
        "row_mean = np.mean(arr, axis=1)  # Mean along each row\n",
        "col_mean = np.mean(arr, axis=0)  # Mean along each column\n",
        "print(mean_value)\n",
        "print(row_mean)\n",
        "print(col_mean)\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1G_tNmE9R4wI",
        "outputId": "484d6f0d-80a0-4c46-f9b9-cf682c5b351c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5.733333333333333\n",
            "[ 3.6  1.4 12.2]\n",
            "[4.66666667 5.66666667 3.66666667 8.66666667 6.        ]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "min_value = np.min(arr)  # Minimum value in the array\n",
        "max_value = np.max(arr)  # Maximum value in the array\n",
        "print(min_value)\n",
        "print(max_value)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Eb84vGC_TAf-",
        "outputId": "b7ab5269-f9c4-4356-97d4-16062eb9bcee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-8\n",
            "15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "min_index = np.argmin(arr)  # Index of the minimum value in the flattened array\n",
        "max_index = np.argmax(arr)  # Index of the maximum value in the flattened array\n"
      ],
      "metadata": {
        "id": "3DglQwjsYXHQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(min_index)\n",
        "print(max_index)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f-fh6Jf2Yaku",
        "outputId": "195343b2-07a6-4b5e-c5f7-6478c8aa2a5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7\n",
            "13\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "median_value = np.median(arr)  # Median of all elements in the array\n",
        "std_deviation = np.std(arr)  # Standard deviation of all elements\n",
        "variance = np.var(arr)  # Variance of all elements\n",
        "\n",
        "print(median_value)\n",
        "print(std_deviation)\n",
        "print(variance)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SAWp2TdxYtiH",
        "outputId": "68013c8a-576b-4587-d61d-4e7781cedcb1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5.0\n",
            "5.6741127549208565\n",
            "32.19555555555555\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "product = np.prod(arr)  # Product of all elements in the array\n",
        "row_product = np.prod(arr, axis=1)  # Product along each row\n",
        "col_product = np.prod(arr, axis=0)  # Product along each column\n",
        "print(product)\n",
        "print(row_product)\n",
        "print(col_product)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IaKOetzucMtA",
        "outputId": "d468892c-833b-4933-92e9-9e54f49e9e5d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-62270208000\n",
            "[   168  -1440 257400]\n",
            "[  30   88 -672  450   78]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cumulative_sum = np.cumsum(arr)  # Cumulative sum of elements in the flattened array\n",
        "print(cumulative_sum)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2XOUhUePcfxs",
        "outputId": "4f4335f5-1242-434c-fc78-aa41b148a4fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 1  3 10 16 18 21 25 17 22 25 35 46 58 73 86]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = np.square(arr)\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h1ACRRKTftTa",
        "outputId": "1798b290-31fd-42aa-86a3-201c5aff8cf8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[  1   4  49  36   4]\n",
            " [  9  16  64  25   9]\n",
            " [100 121 144 225 169]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import time\n",
        "\n",
        "# Using a loop\n",
        "arr = np.arange(1000000)\n",
        "start_time = time.time()\n",
        "result = [x * 2 for x in arr]\n",
        "end_time = time.time()\n",
        "print(\"Time using loop:\", end_time - start_time)\n",
        "\n",
        "# Using NumPy vectorization\n",
        "start_time = time.time()\n",
        "result = arr * 2\n",
        "end_time = time.time()\n",
        "print(\"Time using NumPy:\", end_time - start_time)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K3aFcp4if9oa",
        "outputId": "8236e4e3-f74c-4a16-cb2f-20cd0099b02c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Time using loop: 0.16553807258605957\n",
            "Time using NumPy: 0.016886472702026367\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "arr = np.array([[1, 2, 3], [4, 5, 6]])\n",
        "print(arr)\n",
        "row_vector = np.array([10, 20, 30])\n",
        "\n",
        "result = arr + row_vector\n",
        "print(result)\n",
        "\n",
        "# Broadcasting:\n",
        "# [[ 11  22  33]\n",
        "#  [ 14  25  36]]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dpLm8dyIjbUj",
        "outputId": "f89ba5f8-37eb-48a3-8550-e1a296bca6b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2 3]\n",
            " [4 5 6]]\n",
            "[[11 22 33]\n",
            " [14 25 36]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.array([0, np.pi/4, np.pi/2])\n",
        "\n",
        "result_sin = np.sin(arr)  # Element-wise sine\n",
        "result_cos = np.cos(arr)  # Element-wise cosine\n",
        "result_tan = np.tan(arr)  # Element-wise tangent\n",
        "print(result_sin)\n",
        "print(result_cos)\n",
        "print(result_tan)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UiGMfRi0kY_-",
        "outputId": "999d2356-1bed-4256-d5e3-c562adc96772"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.         0.70710678 1.        ]\n",
            "[1.00000000e+00 7.07106781e-01 6.12323400e-17]\n",
            "[0.00000000e+00 1.00000000e+00 1.63312394e+16]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr1 = np.array([True, False, True])\n",
        "arr2 = np.array([False, True, True])\n",
        "\n",
        "result_and = np.logical_and(arr1, arr2)  # Element-wise logical AND\n",
        "result_or = np.logical_or(arr1, arr2)    # Element-wise logical OR\n",
        "print(result_and)\n",
        "print(result_or)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XuatZgYakx1o",
        "outputId": "5144e827-a8a1-47e9-8410-fdc1ba400145"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[False False  True]\n",
            "[ True  True  True]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
        "\n",
        "row_slice = matrix[2, :]    # Slice the entire second row\n",
        "column_slice = matrix[:, 2]  # Slice the entire second column\n",
        "print(row_slice)\n",
        "print(column_slice)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6uoRyr35liPI",
        "outputId": "9c231c49-846c-4983-f89a-5c79d692af40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[7 8 9]\n",
            "[3 6 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.array([1, 2, 3, 4, 5, 6])\n",
        "\n",
        "every_second = arr[::2]  # Slice every second element: [1, 3, 5]\n",
        "print(every_second)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R7lxVx6Lnezj",
        "outputId": "fa0df5d5-2668-49ba-ac6f-cf352caff107"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 3 5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr = np.array([1, 2, 3, 4, 5])\n",
        "\n",
        "last_element = arr[-1]     # Access the last element (5)\n",
        "reverse_slice = arr[::-1]  # Reverse the array\n",
        "print(reverse_slice)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cndrEyCVnwX3",
        "outputId": "c394e0a8-543f-4289-e275-2ff19036dd4e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5 4 3 2 1]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "arr = np.array([[1, 2, 3], [4, 5, 6]])\n",
        "array_size = arr.size  # Returns 6 (2 rows * 3 columns)\n",
        "num_dimensions = arr.ndim\n",
        "shape_tuple = arr.shape\n",
        "size_along_axis_0 = arr.shape[0]  # Size along the first axis (number of rows)\n",
        "size_along_axis_1 = arr.shape[1]  # Size along the second axis (number of columns)\n",
        "print(num_dimensions)\n",
        "print(shape_tuple)\n",
        "print(size_along_axis_0)\n",
        "print(size_along_axis_1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hCnCruV-pkOV",
        "outputId": "79b17a60-1ee0-42e6-a065-57ed65ecad87"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "(2, 3)\n",
            "2\n",
            "3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "arr = np.array([[[1, 2, 3, 4], [5, 6, 17, 8], [9, 10, 11, 12]],\n",
        "                [[13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24]]])\n",
        "print(arr.shape)  # Output: (2, 3, 4)\n",
        "print(arr)\n",
        "print(arr[0][1][2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DdctzcMesznT",
        "outputId": "187f301f-9f37-46e8-dc68-7746c863226b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(2, 3, 4)\n",
            "[[[ 1  2  3  4]\n",
            "  [ 5  6 17  8]\n",
            "  [ 9 10 11 12]]\n",
            "\n",
            " [[13 14 15 16]\n",
            "  [17 18 19 20]\n",
            "  [21 22 23 24]]]\n",
            "17\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "arr = np.array([1, 2, 3, 4, 5, 6])\n",
        "reshaped_arr = arr.reshape(3, 2)\n",
        "print(reshaped_arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C3LshxM1tsJh",
        "outputId": "1dd9219e-62b3-49ef-ceb2-6d1cf19ce5fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2]\n",
            " [3 4]\n",
            " [5 6]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "arr = np.array([[1, 2, 3], [4, 5, 6]])\n",
        "flattened_arr = arr.flatten()  # Flattens the array into a 1D array\n",
        "print(flattened_arr)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hX7yEocDuBHx",
        "outputId": "6995c07d-c87e-4fdc-c857-ed7dd1a85770"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 2 3 4 5 6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "arr = np.array([1, 2, 3, 4, 5, 6])\n",
        "new_dim_arr = arr[:, np.newaxis]  # Adds a new axis, turning it into a column vector\n",
        "print(new_dim_arr)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XAr9NkDJuZUm",
        "outputId": "05b32dcc-97d6-4b67-d4da-2e4dc32ff6ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1]\n",
            " [2]\n",
            " [3]\n",
            " [4]\n",
            " [5]\n",
            " [6]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a = np.random.randn(2, 3, 4, 5)\n",
        "print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kAFSkGl1u6uG",
        "outputId": "b85f5f52-8f84-4e47-a5f6-b4514c9294f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[[-1.3048025   0.75136042 -0.90208499  1.43621319 -0.99682204]\n",
            "   [ 3.36990292  0.75510197 -0.8506094   1.76760759  0.26512786]\n",
            "   [ 0.41588875  0.41742639 -0.33142206  1.91900498  1.05190324]\n",
            "   [-1.15789593  3.02183063 -0.06424411  0.84149177 -0.22030544]]\n",
            "\n",
            "  [[ 1.52634476 -0.97600504  0.23639726 -0.99839887  0.13126506]\n",
            "   [-0.39432021  1.69740081 -0.55053537 -0.5803315   0.92461294]\n",
            "   [-1.76211156 -0.40603826  0.23452198  0.84597308  0.47727649]\n",
            "   [-0.79945331  2.63661543  0.03146158  0.33954734 -0.51912043]]\n",
            "\n",
            "  [[-0.36383242  0.08320269 -0.47080254 -0.29230927 -0.18620705]\n",
            "   [-0.70038159 -1.40730557  0.60137378 -0.33714688  1.82717703]\n",
            "   [ 1.2559634  -1.2748281  -1.73650002 -0.60858928 -0.50993207]\n",
            "   [ 0.06857843  1.00486951 -1.74806045  0.88188566  0.45986565]]]\n",
            "\n",
            "\n",
            " [[[-0.93284685 -1.95232496  0.13039332  1.36923219 -0.02634414]\n",
            "   [ 1.09443938 -0.91137716 -0.15723289  0.18974312  2.24833544]\n",
            "   [ 0.67552433  0.49228797 -0.16646953  0.29549442 -0.86908712]\n",
            "   [ 0.4032832   0.53918264  1.33160936  1.52025812  0.16252516]]\n",
            "\n",
            "  [[ 0.529171   -1.66729742 -0.05466206  0.81177378 -0.10755121]\n",
            "   [ 0.05663045 -1.79992573 -0.66836208  0.28129097 -1.32967634]\n",
            "   [-0.1405575  -0.50054889 -0.52574385  0.29644052 -1.06662728]\n",
            "   [ 1.15903409  0.56040707 -0.88266092 -1.54581766 -1.94694533]]\n",
            "\n",
            "  [[-0.85338977 -0.42431946  0.7176824   1.18565351 -1.78624854]\n",
            "   [ 2.49303826  1.10174054 -0.16074835  0.44657628  1.19079219]\n",
            "   [ 1.11277885  0.65636302 -0.19447012 -1.93041816 -2.11126951]\n",
            "   [ 0.44472384  0.26483029 -0.56580792 -1.03665381  0.91995488]]]]\n"
          ]
        }
      ]
    }
  ]
}